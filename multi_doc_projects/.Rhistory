!(is.na(comparison.data.sa$prp_tds_adu[i]))
i <- 5
!(is.na(comparison.data.sa$prp_tds_adu[i]))
comparison.data.sa$SpkrAge[i]
comparison.data.sa$prp_spkr <- NA
for (i in 1:nrow(comparison.data.sa)) {
if (!(is.na(comparison.data.sa$prp_tds_adu[i]))) {
comparison.data.sa$prp_spkr[i] <- ifelse(comparison.data.sa$SpkrAge[i] == "Child",
comparison.data.sa$prp_tds_chi[i]/100,
comparison.data.sa$prp_tds_adu[i]/100)
}
}
class(comparison.data$shape)
ggplot(quantity.rand,
aes(x = age_mo_round, y = xds_mph)) +
geom_boxplot(aes(group = age_mo_round)) +
geom_smooth(method = "lm", color = "black") +
ylab("XDS (min/hr)") + xlab("")	+
scale_y_continuous(limits=c(0,85),
breaks=seq(0,85,20)) +
scale_x_continuous(limits=c(0,38),
breaks=seq(0,38,6)) +
coord_cartesian(ylim=c(0,85),xlim=c(0,38))
ggplot(quantity.rand,
aes(x = age_mo_round, y = xds_mph)) +
geom_boxplot(aes(group = age_mo_round)) +
geom_smooth(method = "lm", color = "black") +
ylab("XDS (min/hr)") + xlab("")	+
scale_y_continuous(limits=c(0,85),
breaks=seq(0,85,20)) +
scale_x_continuous(limits=c(0,38),
breaks=seq(0,38,6)) +
coord_cartesian(ylim=c(0,85),xlim=c(0,38))
View(comparison.data)
ggplot(quantity.rand,
aes(x = age_mo_round, y = xds_mph)) +
geom_boxplot(aes(group = age_mo_round)) +
geom_smooth(method = "lm", color = "black") +
ylab("XDS (min/hr)") + xlab("")	+
scale_y_continuous(limits=c(0,85),
breaks=seq(0,85,20)) +
scale_x_continuous(limits=c(0,38),
breaks=seq(0,38,6)) +
coord_cartesian(ylim=c(0,85),xlim=c(0,38)) +
geom_point(data = comparison.data,
aes(x = AgeMonths, y = xds_mph, group = as.factor(Site), shape = as.factor(Site))) +
#  scale_shape_manual(values=c(1,1,2)) + # unclear why i need three here...
theme_apa() +
theme(legend.position="none",
axis.line = element_line(color="black", size = 0.4))
ggplot(quantity.rand,
aes(x = age_mo_round, y = xds_mph)) +
geom_boxplot(aes(group = age_mo_round)) +
geom_smooth(method = "lm", color = "black") +
ylab("XDS (min/hr)") + xlab("")	+
scale_y_continuous(limits=c(0,85),
breaks=seq(0,85,20)) +
scale_x_continuous(limits=c(0,38),
breaks=seq(0,38,6)) +
coord_cartesian(ylim=c(0,85),xlim=c(0,38)) +
geom_point(data = comparison.data,
aes(x = AgeMonths, y = xds_mph, group = as.factor(Site), shape = as.factor(Site))) +
scale_shape_manual(values=unique(comparison.data$shape)) + # unclear why i need three here...
theme_apa() +
theme(legend.position="none",
axis.line = element_line(color="black", size = 0.4))
View(comparison.data)
ggplot(quantity.rand,
aes(x = age_mo_round, y = tds_mph)) +
geom_boxplot(aes(group = age_mo_round)) +
geom_smooth(method = "lm", color = "black") +
ylab("TCDS (min/hr)") + xlab("")	+
scale_y_continuous(limits=c(0,85),
breaks=seq(0,85,20)) +
scale_x_continuous(limits=c(0,38),
breaks=seq(0,38,6)) +
coord_cartesian(ylim=c(0,85),xlim=c(0,38)) +
geom_point(data = comparison.data,
aes(x = AgeMonths, y = tds_mph, group = as.factor(Site), shape = as.factor(Site))) +
scale_shape_manual(values=unique(comparison.data$shape)) +
theme_apa() +
theme(legend.position="none",
axis.line = element_line(color="black", size = 0.4))
ggplot(quantity.rand,
aes(x = age_mo_round, y = tds_mph)) +
geom_boxplot(aes(group = age_mo_round)) +
geom_smooth(method = "lm", color = "black") +
ylab("TCDS (min/hr)") + xlab("Child age (mo)")	+
scale_y_continuous(limits=c(0,40),
breaks=seq(0,40,10)) +
scale_x_continuous(limits=c(0,38),
breaks=seq(0,38,6)) +
coord_cartesian(ylim=c(0,40),xlim=c(0,38)) +
geom_point(data = comparison.data,
aes(x = AgeMonths, y = tds_mph, group = as.factor(Site), shape = as.factor(Site))) +
scale_shape_manual(values=unique(comparison.data$shape)) +
theme_apa() +
theme(legend.position="none",
axis.line = element_line(color="black", size = 0.4))
ggplot(quantity.rand,
aes(x = age_mo_round, y = tds_mph)) +
geom_boxplot(aes(group = age_mo_round)) +
geom_smooth(method = "lm", color = "black") +
ylab("TCDS (min/hr)") + xlab("Child age (mo)")	+
scale_y_continuous(limits=c(0,30),
breaks=seq(0,30,10)) +
scale_x_continuous(limits=c(0,38),
breaks=seq(0,38,6)) +
coord_cartesian(ylim=c(0,30),xlim=c(0,38)) +
geom_point(data = comparison.data,
aes(x = AgeMonths, y = tds_mph, group = as.factor(Site), shape = as.factor(Site))) +
scale_shape_manual(values=unique(comparison.data$shape)) +
theme_apa() +
theme(legend.position="none",
axis.line = element_line(color="black", size = 0.4))
ggplot(quantity.rand,
aes(x = age_mo_round, y = prop_tds)) +
geom_boxplot(aes(group = age_mo_round)) +
geom_smooth(method = "lm", color = "black") +
ylab("TCDS/XDS") + xlab("Child age (mo)")	+
scale_y_continuous(limits=c(-.2,1.2),
breaks=seq(0,1,0.2)) +
scale_x_continuous(limits=c(0,38),
breaks=seq(0,38,6)) +
coord_cartesian(ylim=c(0,1),xlim=c(0,38)) +
geom_point(data = comparison.data,
aes(x = AgeMonths, y = prp_tds, group = as.factor(Site), shape = as.factor(Site))) +
scale_shape_manual(values=unique(comparison.data$shape)) +
theme_apa() +
theme(legend.position="none",
axis.line = element_line(color="black", size = 0.4))
ggplot(quantity.rand.sa,
aes(x = age_mo_round, y = prop_sa.tds,
group = SpkrAge, fill = SpkrAge, color = SpkrAge)) +
geom_boxplot(aes(group = interaction(age_mo_round, SpkrAge),
fill = SpkrAge, color = SpkrAge),
position = position_dodge(1), alpha = 0.3) +
geom_smooth(method = "lm") +
ylab("Prop of TCDS") + xlab("Child age (mo)")	+
scale_y_continuous(limits=c(-.2,1.2),
breaks=seq(0,1,0.2)) +
scale_x_continuous(limits=c(0,38),
breaks=seq(0,38,6)) +
coord_cartesian(ylim=c(0,1), xlim=c(0,38)) +
geom_point(data = comparison.data,
aes(x = AgeMonths, y = prp_tds, group = SpkrAge,
fill = SpkrAge, shape = as.factor(Site))) +
scale_shape_manual(values=unique(comparison.data$shape)) +
col.sample.bu3 +
theme_apa() +
theme(legend.position="none",
axis.line = element_line(color="black", size = 0.4))
ggplot(quantity.rand.sa,
aes(x = age_mo_round, y = prop_sa.tds,
group = SpkrAge, fill = SpkrAge, color = SpkrAge)) +
geom_boxplot(aes(group = interaction(age_mo_round, SpkrAge),
fill = SpkrAge, color = SpkrAge),
position = position_dodge(1), alpha = 0.3) +
geom_smooth(method = "lm") +
ylab("Prop of TCDS") + xlab("Child age (mo)")	+
scale_y_continuous(limits=c(-.2,1.2),
breaks=seq(0,1,0.2)) +
scale_x_continuous(limits=c(0,38),
breaks=seq(0,38,6)) +
coord_cartesian(ylim=c(0,1), xlim=c(0,38))
ggplot(quantity.rand.sa,
aes(x = age_mo_round, y = prop_sa.tds,
group = SpkrAge, fill = SpkrAge, color = SpkrAge)) +
geom_boxplot(aes(group = interaction(age_mo_round, SpkrAge),
fill = SpkrAge, color = SpkrAge),
position = position_dodge(1), alpha = 0.3) +
geom_smooth(method = "lm") +
ylab("Prop of TCDS") + xlab("Child age (mo)")	+
scale_y_continuous(limits=c(-.2,1.2),
breaks=seq(0,1,0.2)) +
scale_x_continuous(limits=c(0,38),
breaks=seq(0,38,6)) +
coord_cartesian(ylim=c(0,1), xlim=c(0,38)) +
geom_point(data = comparison.data.sa,
aes(x = AgeMonths, y = prp_tds, group = SpkrAge,
fill = SpkrAge, shape = as.factor(Site))) +
scale_shape_manual(values=unique(comparison.data$shape)) +
col.sample.bu3 +
theme_apa() +
theme(legend.position="none",
axis.line = element_line(color="black", size = 0.4))
unique(comparison.data$shape)
subset(comparison.data, Type == "Urban")$shape
subset(comparison.data, Type != "Urban")$shape
View(comparison.data)
levels(comparison.data$xds_mph)
levels(comparison.data$Site)
levels(as.factor(comparison.data$Site))
comparison.data$Site <- as.factor(comparison.data$Site)
levels(comparison.data$Site)
unique(comparison.data$shape)
comparison.data$Site <- as.factor(comparison.data$Site, levels = unique(comparison.data$Site))
unique(comparison.data$Site)
comparison.data$Site <- factor(comparison.data$Site, levels = unique(comparison.data$Site))
levels(comparison.data$Site)
comparison.data.shapes <- unique(comparison.data$shape)
comparison.data.shapes
comparison.data <- read_csv(comparison.file)
tds.mph.tofill <- which(is.na(comparison.data$tds_mph) & !(is.na(comparison.data$tds_uph)))
comparison.data$tds_mph[tds.mph.tofill] <- ((comparison.data$tds_uph[tds.mph.tofill] *
avg.utt.len.tseltal$median.utt.len)/60000)
ods.mph.tofill <- which(is.na(comparison.data$ods_mph) & !(is.na(comparison.data$ods_uph)))
comparison.data$ods_mph[ods.mph.tofill] <- ((comparison.data$ods_uph[ods.mph.tofill] *
avg.utt.len.tseltal$median.utt.len)/60000)
xds.mph.tofill <- which(is.na(comparison.data$xds_mph) &
!(is.na(comparison.data$ods_mph)) & !(is.na(comparison.data$tds_mph)))
comparison.data$xds_mph[xds.mph.tofill] <- comparison.data$ods_mph[xds.mph.tofill] +
comparison.data$tds_mph[xds.mph.tofill]
comparison.data.sa <- bind_rows(comparison.data, comparison.data)
comparison.data.sa$SpkrAge <- c(rep("Child", nrow(comparison.data)),
rep("Adult", nrow(comparison.data)))
comparison.data.sa$prp_spkr <- NA
for (i in 1:nrow(comparison.data.sa)) {
if (!(is.na(comparison.data.sa$prp_tds_adu[i]))) {
comparison.data.sa$prp_spkr[i] <- ifelse(comparison.data.sa$SpkrAge[i] == "Child",
comparison.data.sa$prp_tds_chi[i]/100,
comparison.data.sa$prp_tds_adu[i]/100)
}
}
comparison.data$Site <- factor(comparison.data$Site, levels = unique(comparison.data$Site))
comparison.data.shapes <- unique(comparison.data$shape)
comparison.data.shapes
View(comparison.data)
View(comparison.data.sa)
ggplot(quantity.rand.sa,
aes(x = age_mo_round, y = prop_sa.tds,
group = SpkrAge, fill = SpkrAge, color = SpkrAge)) +
geom_boxplot(aes(group = interaction(age_mo_round, SpkrAge),
fill = SpkrAge, color = SpkrAge),
position = position_dodge(1), alpha = 0.3) +
geom_smooth(method = "lm") +
ylab("Prop of TCDS") + xlab("Child age (mo)")	+
scale_y_continuous(limits=c(-.2,1.2),
breaks=seq(0,1,0.2)) +
scale_x_continuous(limits=c(0,38),
breaks=seq(0,38,6)) +
coord_cartesian(ylim=c(0,1), xlim=c(0,38)) +
geom_point(data = comparison.data.sa,
aes(x = AgeMonths, y = prp_spkr, group = SpkrAge,
fill = SpkrAge, shape = Site)) +
scale_shape_manual(values=comparison.data.shapes) +
col.sample.bu3 +
theme_apa() +
theme(legend.position="none",
axis.line = element_line(color="black", size = 0.4))
comparison.data.sa$Site <- factor(comparison.data.sa$Site, levels = unique(comparison.data$Site))
ggplot(quantity.rand.sa,
aes(x = age_mo_round, y = prop_sa.tds,
group = SpkrAge, fill = SpkrAge, color = SpkrAge)) +
geom_boxplot(aes(group = interaction(age_mo_round, SpkrAge),
fill = SpkrAge, color = SpkrAge),
position = position_dodge(1), alpha = 0.3) +
geom_smooth(method = "lm") +
ylab("Prop of TCDS") + xlab("Child age (mo)")	+
scale_y_continuous(limits=c(-.2,1.2),
breaks=seq(0,1,0.2)) +
scale_x_continuous(limits=c(0,38),
breaks=seq(0,38,6)) +
coord_cartesian(ylim=c(0,1), xlim=c(0,38)) +
geom_point(data = comparison.data.sa,
aes(x = AgeMonths, y = prp_spkr, group = SpkrAge,
fill = SpkrAge, shape = Site)) +
scale_shape_manual(values=comparison.data.shapes) +
col.sample.bu3 +
theme_apa() +
theme(legend.position="none",
axis.line = element_line(color="black", size = 0.4))
RStudio.Version()
RStudio.Version()$version
RStudio.Version()$version[1]
library(lme4)
packageVersion("lme4")
data(mtcars)
mtcars
data(iris)
iris
library(tidyverse)
setwd("~/Documents/Academic/Git-Projects/For-Ingeborg")
write_csv(iris, "iris.csv")
library(tidyverse)
library(lme4)
iris.data <- read_csv("iris.csv")
iris.data  <- iris.data %>%
mutate(Petal.Area = Petal.Length * Petal.Width)
iris.data
setwd("~/Documents/Academic/Git-Projects/For-Ingeborg/multi_doc_projects")
# Global variables
rawdata.path <- "raw-data/"
plot.path <- "plots/"
print.model.output <- "Y"
# Read in data
iris.data <- read_csv("iris.csv")
# Prepare data for analyses
# (this is just an example of data prep: here adding a new column)
iris.data  <- iris.data %>%
mutate(Petal.Area = Petal.Length * Petal.Width)
# Global variables
rawdata.path <- "raw-data/"
plot.path <- "plots/"
print.model.output <- "Y"
# Read in data
iris.data <- read_csv(paste0(rawdata.path, "iris.csv"))
iris.data  <- iris.data %>%
mutate(Petal.Area = Petal.Length * Petal.Width)
unc.acc.local.model <- lmer(Sepal.Length ~ Sepal.Width + (1 + Sepal.Width|Species), data = iris.data)
summary(unc.acc.local.model)
unc.acc.cumul.model <- lmer(Sepal.Length ~ Petal.Length +
(1 + Sepal.Width|Species), data = iris.data)
summary(unc.acc.cumul.model)
unc.acc.local.plot <- ggplot(iris.data,
aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_violin()
unc.acc.local.plot
unc.acc.local.plot <- ggplot(iris.data,
aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point()
unc.acc.local.plot
unc.acc.cumul.plot <- ggplot(iris.data,
aes(x = Sepal.Length, y = Petal.Length, color = Species)) +
geom_point()
unc.acc.cumul.plot
ggsave(paste0(plot.path, "unc.acc.local.plot"), unc.acc.local.plot)
ggsave(paste0(plot.path, "unc.acc.local.plot"), plot = unc.acc.local.plot)
unc.acc.local.plot <- ggplot(iris.data,
aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point()
ggsave(paste0(plot.path, "unc.acc.local.plot"), plot = unc.acc.local.plot)
ggsave(paste0(plot.path, "unc.acc.local.plot.png"), plot = unc.acc.local.plot)
source("1-UncorrectedAccuracy.R")
library(tidyverse)
library(lme4)
# In what follows I'm just going to generate an example with the built-in
# iris data. You can also access this data by entering
# data(iris)
# in the console, but I've saved it as a .csv for this example
# Global variables
rawdata.path <- "raw-data/"
plot.path <- "plots/"
print.model.output <- "Y"
# Read in data
iris.data <- read_csv(paste0(rawdata.path, "iris.csv"))
# Prepare data for analyses
# (this is just an example of data prep: here adding a new column)
iris.data  <- iris.data %>%
mutate(Petal.Area = Petal.Length * Petal.Width)
# Run models and generate plots
source("1-UncorrectedAccuracy.R")
source("2-CorrectedAccuracy.R")
source("3-UnseenWords.R")
# Print model output if requested in the global variables
# (there are more sophisticated solutions to this problem,
# such as saving the model results as an object or table
# and writing them out to text file but let's start simple
# for now)
if (print.model.output == "Y") {
# Uncorrected accuracy
print ("##### Uncorrected accuracy: Local #####")
summary(unc.acc.local.model)
print ("##### Uncorrected accuracy: Cumulative #####")
summary(unc.acc.cumul.model)
print ("##### Uncorrected accuracy: Local (original Mc & C) #####")
summary(unc.acc.local.orig.model)
print ("##### Uncorrected accuracy: Cumulative (original Mc & C) #####")
summary(unc.acc.cumul.orig.model)
# Corrected accracy
print ("##### Corrected accuracy: Local #####")
summary(cor.acc.local.model)
print ("##### Corrected accuracy: Cumulative #####")
summary(cor.acc.cumul.model)
print ("##### Corrected accuracy: Local (original Mc & C) #####")
summary(cor.acc.local.orig.model)
print ("##### Corrected accuracy: Cumulative (original Mc & C) #####")
summary(cor.acc.cumul.orig.model)
# Unseen words
print ("##### Unseen words: Local #####")
summary(uns.wds.local.model)
print ("##### Unseen words: Cumulative #####")
summary(uns.wds.cumul.model)
}
# For a different kind of project you could also do something like:
# source("1-Prepare-data.R")
# source("2-Analyze-data.R")
# source("3-Plot-results.R")
source("1-UncorrectedAccuracy.R")
cor.acc.local.model <- lmer(Sepal.Width ~ Sepal.Length +
(1 + Sepal.Length|Species), data = iris.data)
cor.acc.cumul.model <- lmer(Sepal.Width ~ Petal.Length +
(1 + Sepal.Width|Species), data = iris.data)
cor.acc.cumul.model <- lmer(Sepal.Width ~ Petal.Width +
(1 + Sepal.Width|Species), data = iris.data)
cor.acc.cumul.model <- lmer(Sepal.Width ~ Petal.Length +
(1 + Petal.Length|Species), data = iris.data)
cor.acc.local.model <- lmer(Sepal.Width ~ Sepal.Length +
(1 + Sepal.Length|Species), data = iris.data)
## cumulative sample
cor.acc.cumul.model <- lmer(Sepal.Width ~ Petal.Length +
(1 + Petal.Length|Species), data = iris.data)
cor.acc.local.plot <- ggplot(iris.data,
aes(x = Sepal.Width, y = Sepal.Length, color = Species)) +
geom_point()
ggsave(paste0(plot.path, "cor.acc.local.plot.png"), plot = cor.acc.local.plot)
## cumulative sample
cor.acc.cumul.plot <- ggplot(iris.data,
aes(x = Sepal.Width, y = Petal.Length, color = Species)) +
geom_point()
ggsave(paste0(plot.path, "cor.acc.cumul.plot.png"), plot = cor.acc.cumul.plot)
## local sample
cor.acc.local.orig.model <- lmer(Sepal.Width ~ Sepal.Length +
(1 + Sepal.Length|Species), data = iris.data)
## cumulative sample
cor.acc.cumul.orig.model <- lmer(Sepal.Width ~ Petal.Length +
(1 + Petal.Length|Species), data = iris.data)
cor.acc.local.orig.plot <- ggplot(iris.data,
aes(x = Sepal.Width, y = Sepal.Length, color = Species)) +
geom_point()
ggsave(paste0(plot.path, "cor.acc.local.orig.plot.png"), plot = cor.acc.local.orig.plot)
## cumulative sample
cor.acc.cumul.orig.plot <- ggplot(iris.data,
aes(x = Sepal.Width, y = Petal.Length, color = Species)) +
geom_point()
ggsave(paste0(plot.path, "cor.acc.cumul.orig.plot.png"), plot = cor.acc.cumul.orig.plot)
## local sample
uns.wds.local.model <- lmer(Petal.Width ~ Sepal.Width +
(1 + Sepal.Length|Species), data = iris.data)
## cumulative sample
uns.wds.cumul.model <- lmer(Petal.Width ~ Petal.Length +
(1 + Petal.Length|Species), data = iris.data)
uns.wds.local.plot <- ggplot(iris.data,
aes(x = Petal.Width, y = Sepal.Width, color = Species)) +
geom_point()
ggsave(paste0(plot.path, "uns.wds.local.plot.png"), plot = uns.wds.local.plot)
## cumulative sample
uns.wds.cumul.plot <- ggplot(iris.data,
aes(x = Petal.Width, y = Petal.Length, color = Species)) +
geom_point()
ggsave(paste0(plot.path, "uns.wds.cumul.plot.png"), plot = uns.wds.cumul.plot)
library(tidyverse)
library(lme4)
# In what follows I'm just going to generate an example with the built-in
# iris data. You can also access this data by entering
# data(iris)
# in the console, but I've saved it as a .csv for this example
# Global variables
rawdata.path <- "raw-data/"
plot.path <- "plots/"
print.model.output <- "Y"
# Read in data
iris.data <- read_csv(paste0(rawdata.path, "iris.csv"))
# Prepare data for analyses
# (this is just an example of data prep: here adding a new column)
iris.data  <- iris.data %>%
mutate(Petal.Area = Petal.Length * Petal.Width)
# Run models and generate plots
source("1-UncorrectedAccuracy.R")
source("2-CorrectedAccuracy.R")
source("3-UnseenWords.R")
print(summary(unc.acc.local.model))
if (print.model.output == "Y") {
# Uncorrected accuracy
print ("##### Uncorrected accuracy: Local #####")
print(summary(unc.acc.local.model))
print ("##### Uncorrected accuracy: Cumulative #####")
summary(unc.acc.cumul.model)
print ("##### Uncorrected accuracy: Local (original Mc & C) #####")
summary(unc.acc.local.orig.model)
print ("##### Uncorrected accuracy: Cumulative (original Mc & C) #####")
summary(unc.acc.cumul.orig.model)
# Corrected accracy
print ("##### Corrected accuracy: Local #####")
summary(cor.acc.local.model)
print ("##### Corrected accuracy: Cumulative #####")
summary(cor.acc.cumul.model)
print ("##### Corrected accuracy: Local (original Mc & C) #####")
summary(cor.acc.local.orig.model)
print ("##### Corrected accuracy: Cumulative (original Mc & C) #####")
summary(cor.acc.cumul.orig.model)
# Unseen words
print ("##### Unseen words: Local #####")
summary(uns.wds.local.model)
print ("##### Unseen words: Cumulative #####")
summary(uns.wds.cumul.model)
}
if (print.model.output == "Y") {
# Uncorrected accuracy
print ("##### Uncorrected accuracy: Local #####")
print(summary(unc.acc.local.model))
print ("##### Uncorrected accuracy: Cumulative #####")
print(summary(unc.acc.cumul.model))
print ("##### Uncorrected accuracy: Local (original Mc & C) #####")
print(summary(unc.acc.local.orig.model))
print ("##### Uncorrected accuracy: Cumulative (original Mc & C) #####")
print(summary(unc.acc.cumul.orig.model))
# Corrected accracy
print ("##### Corrected accuracy: Local #####")
print(summary(cor.acc.local.model))
print ("##### Corrected accuracy: Cumulative #####")
print(summary(cor.acc.cumul.model))
print ("##### Corrected accuracy: Local (original Mc & C) #####")
print(summary(cor.acc.local.orig.model))
print ("##### Corrected accuracy: Cumulative (original Mc & C) #####")
print(summary(cor.acc.cumul.orig.model))
# Unseen words
print ("##### Unseen words: Local #####")
print(summary(uns.wds.local.model))
print ("##### Unseen words: Cumulative #####")
print(summary(uns.wds.cumul.model))
}
